name: Deploy to AWS EC2

on:
  push:
    branches: ["main"]

concurrency:
  group: production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PROD 

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: 'sts.amazonaws.com'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install PHP Dependencies
        env:
          APP_ENV: prod
          SYMFONY_ENV: prod
        run: |
          composer install --no-dev --optimize-autoloader --no-scripts
          composer dump-env prod
          # Ensure base .env exists
          if [ ! -f .env ]; then
            cp .env.example .env || echo "APP_ENV=prod" > .env
          fi
          echo "APP_ENV=prod" >> .env.local
          echo "APP_DEBUG=0" >> .env.local

      - name: Install Node Dependencies and Build
        run: |
          npm install
          npm run build

      - name: Create deployment archive
        run: |
          # Ensure we include .env and .env.local
          tar -czf deploy.tar.gz * .env .env.local

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ubuntu"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Update package list
            sudo apt-get update
            
            # Function to check and install packages
            install_if_missing() {
              if ! command -v $1 &> /dev/null; then
                echo "$1 is not installed. Installing..."
                sudo apt-get install -y $2
              else
                echo "$1 is already installed"
              fi
            }
            
            # Check and install PHP 8.4
            if ! command -v php &> /dev/null || ! php -v | grep -q "PHP 8.4"; then
              echo "Installing PHP 8.4..."
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository -y ppa:ondrej/php
              sudo apt-get update
              sudo apt-get install -y php8.4 php8.4-cli php8.4-fpm php8.4-pgsql php8.4-xml \
                php8.4-curl php8.4-mbstring php8.4-zip php8.4-intl php8.4-gd
            fi
            
            # Check and install Node.js 18
            if ! command -v node &> /dev/null || ! node -v | grep -q "v18"; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Check and install Nginx
            install_if_missing nginx nginx
            
            # Check and install Git
            install_if_missing git git
            
            # Check and install Composer
            if ! command -v composer &> /dev/null; then
              echo "Installing Composer..."
              curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
            fi
            
            # Check and install npm (if not installed with Node.js)
            install_if_missing npm npm
            
            # Verify installations
            echo "PHP Version: $(php -v | head -n 1)"
            echo "Node Version: $(node -v)"
            echo "NPM Version: $(npm -v)"
            echo "Composer Version: $(composer -V)"
            echo "Nginx Version: $(nginx -v 2>&1)"
            
            # Create project directory if it doesn't exist
            sudo mkdir -p /var/www/html/airbnb-clone
            sudo chown -R ubuntu:ubuntu /var/www/html/airbnb-clone
            
            # Configure Nginx
            if [ ! -f /etc/nginx/sites-available/airbnb-clone ]; then
              echo "Setting up Nginx configuration..."
              echo 'server {
                listen 80;
                server_name _;
                root /var/www/html/airbnb-clone/public;

                location / {
                    try_files $uri /index.php$is_args$args;
                }

                location ~ ^/index\.php(/|$) {
                    fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;
                    fastcgi_split_path_info ^(.+\.php)(/.*)$;
                    include fastcgi_params;
                    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                    fastcgi_param DOCUMENT_ROOT $realpath_root;
                    internal;
                }

                location ~ \.php$ {
                    return 404;
                }
            }' | sudo tee /etc/nginx/sites-available/airbnb-clone

              if [ $? -eq 0 ]; then
                echo "Nginx configuration created successfully"
                sudo ln -sf /etc/nginx/sites-available/airbnb-clone /etc/nginx/sites-enabled/
                sudo rm -f /etc/nginx/sites-enabled/default
                sudo nginx -t && sudo systemctl restart nginx || {
                  echo "Nginx configuration test failed"
                  exit 1
                }
              else
                echo "Failed to create Nginx configuration"
                exit 1
              fi
            fi

            # Deploy application
            cd /var/www/html/airbnb-clone
            tar xzf /home/ubuntu/deploy.tar.gz
            rm /home/ubuntu/deploy.tar.gz

            # Install and configure PostgreSQL
            sudo apt-get install -y postgresql postgresql-contrib
            sudo systemctl start postgresql

            echo "PostgreSQL Version: $(psql --version)"
            
            # Configure PostgreSQL with simple auth
            sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
            sudo -u postgres psql -c "CREATE USER airbnb WITH PASSWORD 'airbnb';"
            sudo -u postgres psql -c "CREATE DATABASE airbnb_db;"
            sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE airbnb_db TO airbnb;"
            
            # Allow password authentication
            echo "host all all all md5" | sudo tee /etc/postgresql/*/main/pg_hba.conf
            sudo systemctl restart postgresql
            
            # Configure environment files with simple credentials
            echo "APP_ENV=prod" > .env
            echo "DATABASE_URL=postgresql://airbnb:airbnb@127.0.0.1:5432/airbnb_db" >> .env
            
            echo "APP_ENV=prod" > .env.local
            echo "APP_DEBUG=0" >> .env.local
            echo "DATABASE_URL=postgresql://airbnb:airbnb@127.0.0.1:5432/airbnb_db" >> .env.local

            # Set proper permissions before cache operations
            sudo chown -R ubuntu:www-data .
            sudo find . -type f -exec chmod 664 {} \;
            sudo find . -type d -exec chmod 775 {} \;
            sudo find var -type d -exec chmod 777 {} \;
            
            export APP_ENV=prod
            export SYMFONY_ENV=prod
            
            # Install dependencies and build
            COMPOSER_ALLOW_SUPERUSER=1 composer install --no-dev --optimize-autoloader
            COMPOSER_ALLOW_SUPERUSER=1 composer dump-env prod
            
            # Clear cache with proper permissions
            sudo -E php bin/console cache:clear --no-debug
            sudo -E php bin/console cache:warmup --no-debug
            
            # Run migrations
            php bin/console doctrine:migrations:migrate --no-interaction || true
            
            # Final permission adjustments
            sudo chown -R www-data:www-data var/
            sudo find var -type d -exec chmod 777 {} \;
            sudo find var -type f -exec chmod 666 {} \;
            
            # Restart services
            sudo systemctl restart postgresql
            sudo systemctl restart php8.4-fpm
            sudo systemctl restart nginx