name: Deploy to AWS EC2

on:
  push:
    branches: ["main"]

concurrency:
  group: production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PROD  # Specify the environment name here

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # Using environment variables for non-sensitive data
          audience: 'sts.amazonaws.com'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install PHP Dependencies
        env:
          APP_ENV: prod
          SYMFONY_ENV: prod
        run: |
          composer install --no-dev --optimize-autoloader --no-scripts
          composer dump-env prod
          # Create Webpack Encore configuration if it doesn't exist
          mkdir -p config/packages
          echo "webpack_encore:
            output_path: '%kernel.project_dir%/public/build'
            script_attributes:
                defer: true

          framework:
            assets:
                json_manifest_path: '%kernel.project_dir%/public/build/manifest.json'

          twig:
            stimulus:
                controller_paths:
                    - '%kernel.project_dir%/assets/controllers'
                helper: true" > config/packages/webpack_encore.yaml
          APP_ENV=prod composer run-script post-install-cmd

      - name: Install Node Dependencies and Build
        run: |
          npm install
          npm run build

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ vars.EC2_USERNAME }}  # Could be moved to variables if not sensitive
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Check and install required software
            echo "Checking required software..."
            
            # Update package list
            sudo apt-get update
            
            # Function to check and install packages
            install_if_missing() {
              if ! command -v $1 &> /dev/null; then
                echo "$1 is not installed. Installing..."
                sudo apt-get install -y $2
              else
                echo "$1 is already installed"
              fi
            }
            
            # Check and install PHP 8.2
            if ! command -v php &> /dev/null || ! php -v | grep -q "PHP 8.2"; then
              echo "Installing PHP 8.2..."
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository -y ppa:ondrej/php
              sudo apt-get update
              sudo apt-get install -y php8.2 php8.2-cli php8.2-fpm php8.2-pgsql php8.2-xml \
                php8.2-curl php8.2-mbstring php8.2-zip php8.2-intl php8.2-gd
            fi
            
            # Check and install Node.js 18
            if ! command -v node &> /dev/null || ! node -v | grep -q "v18"; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Check and install Nginx
            install_if_missing nginx nginx
            
            # Check and install Git
            install_if_missing git git
            
            # Check and install Composer
            if ! command -v composer &> /dev/null; then
              echo "Installing Composer..."
              curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
            fi
            
            # Check and install npm (if not installed with Node.js)
            install_if_missing npm npm
            
            # Verify installations
            echo "PHP Version: $(php -v | head -n 1)"
            echo "Node Version: $(node -v)"
            echo "NPM Version: $(npm -v)"
            echo "Composer Version: $(composer -V)"
            echo "Nginx Version: $(nginx -v 2>&1)"
            
            # Configure Nginx if not already configured
            if [ ! -f /etc/nginx/sites-available/airbnb-clone ]; then
              echo "Setting up Nginx configuration..."
              sudo tee /etc/nginx/sites-available/airbnb-clone << 'EOF'
              server {
                  listen 80;
                  server_name _;
                  root /var/www/html/airbnb-clone/public;
                  
                  location / {
                      try_files $uri /index.php$is_args$args;
                  }
                  
                  location ~ ^/index\.php(/|$) {
                      fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;
                      fastcgi_split_path_info ^(.+\.php)(/.*)$;
                      include fastcgi_params;
                      fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
                      fastcgi_param DOCUMENT_ROOT $realpath_root;
                      internal;
                  }
                  
                  location ~ \.php$ {
                      return 404;
                  }
              }
              EOF
              
              sudo ln -s /etc/nginx/sites-available/airbnb-clone /etc/nginx/sites-enabled/
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo nginx -t && sudo systemctl restart nginx
            fi

            # Continue with deployment
            # Navigate to project directory
            cd /var/www/html/airbnb-clone

            # Pull latest changes
            git pull origin main

            # Install/update dependencies with proper environment
            export APP_ENV=prod
            export SYMFONY_ENV=prod
            composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
            composer dump-env prod
            
            # Now run the scripts separately
            composer run-script post-install-cmd --no-dev
            
            # Continue with deployment
            npm install
            npm run build
            
            # Ensure proper environment for Symfony commands
            export APP_ENV=prod
            php bin/console cache:clear --env=prod --no-debug
            php bin/console cache:warmup --env=prod --no-debug
            
            # Database migrations
            php bin/console doctrine:migrations:migrate --no-interaction

            # Clear and warm up cache
            php bin/console cache:clear
            php bin/console cache:warmup

            # Set proper permissions
            sudo chown -R www-data:www-data var/
            sudo chmod -R 775 var/

            # Restart services if needed
            sudo systemctl restart php8.2-fpm
            sudo systemctl restart nginx
