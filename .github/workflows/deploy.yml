name: Deploy to AWS EC2

on:
  push:
    branches: ["main"]

concurrency:
  group: production
  cancel-in-progress: false

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: PROD 

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          audience: 'sts.amazonaws.com'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.4"

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"

      - name: Install PHP Dependencies
        env:
          APP_ENV: prod
          SYMFONY_ENV: prod
        run: |
          composer install --no-dev --optimize-autoloader --no-scripts
          composer dump-env prod
          # Ensure base .env exists
          if [ ! -f .env ]; then
            cp .env.example .env || echo "APP_ENV=prod" > .env
          fi
          echo "APP_ENV=prod" >> .env.local
          echo "APP_DEBUG=0" >> .env.local

      - name: Install Node Dependencies and Build
        run: |
          npm install
          npm run build

      - name: Create deployment archive
        run: |
          # Ensure we include .env and .env.local
          tar -czf deploy.tar.gz * .env .env.local

      - name: Copy files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "deploy.tar.gz"
          target: "/home/ubuntu"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Update package list
            sudo apt-get update
            
            # Install Caddy
            sudo apt-get install -y debian-keyring debian-archive-keyring apt-transport-https
            curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
            curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list
            sudo apt-get update
            sudo apt-get install -y caddy
            
            # Function to check and install packages
            install_if_missing() {
              if ! command -v $1 &> /dev/null; then
                echo "$1 is not installed. Installing..."
                sudo apt-get install -y $2
              else
                echo "$1 is already installed"
              fi
            }
            
            # Check and install PHP 8.4
            if ! command -v php &> /dev/null || ! php -v | grep -q "PHP 8.4"; then
              echo "Installing PHP 8.4..."
              sudo apt-get install -y software-properties-common
              sudo add-apt-repository -y ppa:ondrej/php
              sudo apt-get update
              sudo apt-get install -y php8.4 php8.4-cli php8.4-fpm php8.4-pgsql php8.4-xml \
                php8.4-curl php8.4-mbstring php8.4-zip php8.4-intl php8.4-gd
            fi
            
            # Check and install Node.js 18
            if ! command -v node &> /dev/null || ! node -v | grep -q "v18"; then
              echo "Installing Node.js 18..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Check and install Git
            install_if_missing git git
            
            # Check and install Composer
            if ! command -v composer &> /dev/null; then
              echo "Installing Composer..."
              curl -sS https://getcomposer.org/installer | sudo php -- --install-dir=/usr/local/bin --filename=composer
            fi
            
            # Check and install npm (if not installed with Node.js)
            install_if_missing npm npm
            
            # Verify installations
            echo "PHP Version: $(php -v | head -n 1)"
            echo "Node Version: $(node -v)"
            echo "NPM Version: $(npm -v)"
            echo "Composer Version: $(composer -V)"
            
            # Create project directory if it doesn't exist
            sudo mkdir -p /var/www/html/airbnb-clone
            sudo chown -R ubuntu:ubuntu /var/www/html/airbnb-clone
            
            # Get public IP
            PUBLIC_IP=$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
            echo "Server public IP: $PUBLIC_IP"

            # Install certutil for SSL certificate management
            sudo apt-get install -y libnss3-tools

            # Configure sudo permissions for Caddy
            echo "caddy ALL=(ALL) NOPASSWD: /usr/bin/tee /usr/local/share/ca-certificates/*" | sudo EDITOR='tee -a' visudo
            echo "caddy ALL=(ALL) NOPASSWD: /usr/sbin/update-ca-certificates" | sudo EDITOR='tee -a' visudo

            # Configure Caddy with proper SSL settings
            sudo tee /etc/caddy/Caddyfile << EOF
            {
              # Global options block
              email erodriguez10@myges.fr
              http_port 80
              https_port 443
              auto_https disable_redirects  # Prevent automatic HTTPS redirects
            }

            http://35.180.140.46 {
              redir https://{host}{uri} permanent  # Explicit redirect to HTTPS
            }

            https://35.180.140.46 {
              log {
                output file /var/log/caddy/access.log
                format json
                level INFO
              }

              tls internal  # Use Caddy's automatic certificate management

              root * /var/www/html/airbnb-clone/public
              encode gzip

              header {
                # Standard security headers
                Strict-Transport-Security "max-age=31536000; includeSubDomains"
                X-Content-Type-Options "nosniff"
                X-Frame-Options "DENY"
                Referrer-Policy "strict-origin-when-cross-origin"
                
                # CORS headers
                Access-Control-Allow-Origin *
                Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT"
                Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
                Access-Control-Expose-Headers "Content-Length,Content-Range"
              }

              php_fastcgi unix//var/run/php/php8.4-fpm.sock {
                try_files {path} /index.php?{query}
              }

              # Serve static files
              file_server

              # Handle OPTIONS preflight
              @options {
                method OPTIONS
              }

              handle @options {
                header {
                  Access-Control-Allow-Origin "*"
                  Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT"
                  Access-Control-Allow-Headers "*"
                  Access-Control-Max-Age "1728000"
                }
                respond 204
              }
            }
            EOF

            # Create log directory for Caddy
            sudo mkdir -p /var/log/caddy
            sudo chown -R caddy:caddy /var/log/caddy
            sudo chmod 755 /var/log/caddy

            # Ensure all permissions are correct
            sudo chown -R caddy:caddy /etc/caddy /var/lib/caddy
            sudo chmod -R 755 /etc/caddy /var/lib/caddy

            # Create required directories with proper permissions
            sudo mkdir -p /etc/caddy/pki/authorities/local
            sudo mkdir -p /var/lib/caddy/.local/share/caddy
            sudo mkdir -p /var/lib/caddy/.config/caddy

            # Set proper ownership and permissions
            sudo chown -R caddy:caddy /etc/caddy/pki
            sudo chown -R caddy:caddy /var/lib/caddy
            sudo chmod 755 /etc/caddy/pki/authorities/local
            sudo chmod -R 700 /var/lib/caddy/.local
            sudo chmod -R 700 /var/lib/caddy/.config

            # Give Caddy proper sudo permissions for certificate management
            echo "caddy ALL=(ALL) NOPASSWD: /usr/sbin/update-ca-certificates" | sudo EDITOR='tee -a' visudo
            echo "caddy ALL=(ALL) NOPASSWD: /usr/bin/tee /usr/local/share/ca-certificates/*" | sudo EDITOR='tee -a' visudo
            echo "caddy ALL=(ALL) NOPASSWD: /usr/bin/rm -f /usr/local/share/ca-certificates/*" | sudo EDITOR='tee -a' visudo

            # Configure Caddy with updated SSL settings
            sudo tee /etc/caddy/Caddyfile << EOF
            {
                # Global options block
                email erodriguez10@myges.fr
                http_port 80
                https_port 443
                # Specify certificate storage location
                storage file_system {
                    root /var/lib/caddy/.local/share/caddy
                }
            }
            
            # Rest of your Caddy configuration...
            {
              # Global options block
              email erodriguez10@myges.fr
              http_port 80
              https_port 443
              auto_https disable_redirects  # Prevent automatic HTTPS redirects
            }

            http://35.180.140.46 {
              redir https://{host}{uri} permanent  # Explicit redirect to HTTPS
            }

            https://35.180.140.46 {
              log {
                output file /var/log/caddy/access.log
                format json
                level INFO
              }

              tls internal  # Use Caddy's automatic certificate management

              root * /var/www/html/airbnb-clone/public
              encode gzip

              header {
                # Standard security headers
                Strict-Transport-Security "max-age=31536000; includeSubDomains"
                X-Content-Type-Options "nosniff"
                X-Frame-Options "DENY"
                Referrer-Policy "strict-origin-when-cross-origin"
                
                # CORS headers
                Access-Control-Allow-Origin *
                Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT"
                Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
                Access-Control-Expose-Headers "Content-Length,Content-Range"
              }

              php_fastcgi unix//var/run/php/php8.4-fpm.sock {
                try_files {path} /index.php?{query}
              }

              # Serve static files
              file_server

              # Handle OPTIONS preflight
              @options {
                method OPTIONS
              }

              handle @options {
                header {
                  Access-Control-Allow-Origin "*"
                  Access-Control-Allow-Methods "GET, POST, OPTIONS, DELETE, PUT"
                  Access-Control-Allow-Headers "*"
                  Access-Control-Max-Age "1728000"
                }
                respond 204
              }
            }
            EOF

            # Ensure SELinux context if enabled
            if command -v semanage &> /dev/null; then
                sudo semanage fcontext -a -t httpd_sys_content_t "/var/lib/caddy/.local/share/caddy(/.*)?"
                sudo restorecon -Rv /var/lib/caddy/.local/share/caddy
            fi

            # Restart Caddy with proper environment
            sudo -u caddy CADDYPATH=/var/lib/caddy/.local/share/caddy systemctl restart caddy
            
            # Wait for Caddy to start and check logs
            sleep 5
            sudo journalctl -u caddy -n 50 --no-pager

            # Stop any running web servers and start Caddy
            sudo systemctl stop apache2 || true
            sudo systemctl stop nginx || true
            sudo systemctl stop caddy
            sleep 2
            sudo systemctl start caddy
            sudo systemctl status caddy

            # Show logs for debugging
            sudo journalctl -u caddy -f --no-pager &
            sleep 5

            # Remove Nginx if installed
            sudo apt-get remove -y nginx nginx-common
            
            # Start Caddy
            sudo systemctl enable caddy
            sudo systemctl restart caddy

            # Additional SSL configuration
            sudo ufw allow 80/tcp
            sudo ufw allow 443/tcp
            
            # Ensure Caddy has proper permissions
            sudo chown -R caddy:caddy /etc/caddy
            sudo chmod 644 /etc/caddy/Caddyfile
            
            # Restart Caddy with new configuration
            sudo systemctl restart caddy
            sudo systemctl status caddy
            
            # Show Caddy logs for debugging
            echo "Showing Caddy logs..."
            sudo journalctl -u caddy -n 50 --no-pager

            # Deploy application
            cd /var/www/html/airbnb-clone
            tar xzf /home/ubuntu/deploy.tar.gz
            rm /home/ubuntu/deploy.tar.gz

            # Install and configure PostgreSQL
            sudo apt-get install -y postgresql postgresql-contrib postgis postgresql-*-postgis-* postgresql-*-postgis-scripts
            sudo systemctl start postgresql
            sudo systemctl status postgresql

            # Find PostgreSQL version and configuration directory
            PG_VERSION=$(pg_config --version | awk '{print $2}' | cut -d. -f1)
            PG_CONF_DIR="/etc/postgresql/$PG_VERSION/main"
            echo "PostgreSQL version: $PG_VERSION"
            echo "Configuration directory: $PG_CONF_DIR"

            # Backup original pg_hba.conf if it exists
            if [ -f "$PG_CONF_DIR/pg_hba.conf" ]; then
                sudo cp "$PG_CONF_DIR/pg_hba.conf" "$PG_CONF_DIR/pg_hba.conf.bak"
            fi
            
            # Configure PostgreSQL authentication (trust method temporarily)
            sudo tee "$PG_CONF_DIR/pg_hba.conf" > /dev/null << EOL
            local   all             postgres                                trust
            local   all             all                                     trust
            host    all             all             127.0.0.1/32            trust
            host    all             all             ::1/128                 trust
            EOL
            
            sudo systemctl restart postgresql
            sleep 5  # Wait for PostgreSQL to restart

            # Drop existing database and user if they exist
            sudo -u postgres psql -c "DROP DATABASE IF EXISTS airbnb_db;"
            sudo -u postgres psql -c "DROP USER IF EXISTS airbnb;"
            
            # Create user and database
            sudo -u postgres createuser --createdb airbnb
            sudo -u postgres createdb -O airbnb airbnb_db
            
            # Set passwords
            sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD 'postgres';"
            sudo -u postgres psql -c "ALTER USER airbnb WITH PASSWORD 'airbnb';"
            
            # Switch to md5 authentication
            sudo tee "$PG_CONF_DIR/pg_hba.conf" > /dev/null << EOL
            local   all             postgres                                md5
            local   all             all                                     md5
            host    all             all             127.0.0.1/32            md5
            host    all             all             ::1/128                 md5
            EOL
            
            sudo systemctl restart postgresql
            sleep 5  # Wait for PostgreSQL to restart

            # Test connection with password
            PGPASSWORD=airbnb psql -U airbnb -h 127.0.0.1 -d airbnb_db -c "SELECT 1;" || {
              echo "Failed to connect to PostgreSQL"
              echo "Checking PostgreSQL status..."
              sudo systemctl status postgresql
              echo "Checking PostgreSQL logs..."
              sudo tail -n 50 /var/log/postgresql/postgresql-*.log
              exit 1
            }

            # Enable PostGIS extension using superuser with password
            PGPASSWORD=postgres psql -U postgres -h 127.0.0.1 -d airbnb_db -c "CREATE EXTENSION IF NOT EXISTS postgis;"
            
            # Configure environment files with verified credentials
            cat > .env << 'EOL'
            APP_ENV=prod
            APP_SECRET=your_app_secret_here
            DATABASE_URL=postgresql://airbnb:airbnb@127.0.0.1:5432/airbnb_db?serverVersion=15&charset=utf8
            MESSENGER_TRANSPORT_DSN=doctrine://default
            MAILER_DSN=smtp://localhost:1025
            STRIPE_PUBLIC_KEY=pk_test_your_key
            STRIPE_SECRET_KEY=sk_test_your_key
            GOOGLE_MAPS_API_KEY=your_google_maps_key
            JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem
            JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
            JWT_PASSPHRASE=your_passphrase
            CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'
            EOL

            cat > .env.local << 'EOL'
            APP_ENV=prod
            APP_DEBUG=0
            APP_SECRET=your_app_secret_here
            DATABASE_URL=postgresql://airbnb:airbnb@127.0.0.1:5432/airbnb_db?serverVersion=15&charset=utf8
            MESSENGER_TRANSPORT_DSN=doctrine://default
            MAILER_DSN=smtp://localhost:1025
            STRIPE_PUBLIC_KEY=pk_test_your_key
            STRIPE_SECRET_KEY=sk_test_your_key
            GOOGLE_MAPS_API_KEY=your_google_maps_key
            JWT_SECRET_KEY=%kernel.project_dir%/config/jwt/private.pem
            JWT_PUBLIC_KEY=%kernel.project_dir%/config/jwt/public.pem
            JWT_PASSPHRASE=your_passphrase
            CORS_ALLOW_ORIGIN='^https?://(localhost|127\.0\.0\.1)(:[0-9]+)?$'
            EOL

            # Set proper permissions before cache operations
            sudo chown -R ubuntu:www-data .
            sudo find . -type f -exec chmod 664 {} \;
            sudo find . -type d -exec chmod 775 {} \;
            sudo find var -type d -exec chmod 777 {} \;
            
            export APP_ENV=prod
            export SYMFONY_ENV=prod
            
            # Install dependencies and build
            COMPOSER_ALLOW_SUPERUSER=1 composer require doctrine/doctrine-fixtures-bundle
            COMPOSER_ALLOW_SUPERUSER=1 composer install --optimize-autoloader
            COMPOSER_ALLOW_SUPERUSER=1 composer dump-env prod
            
            # Clear cache with proper permissions
            sudo -E php bin/console cache:clear --no-debug
            sudo -E php bin/console cache:warmup --no-debug
            
            # Run migrations
            php bin/console doctrine:migrations:migrate --no-interaction || true

            # Load fixtures only if explicitly requested
            echo "Loading fixtures..."
            php bin/console doctrine:fixtures:load --no-interaction --env=dev
            
            # Final permission adjustments
            sudo chown -R www-data:www-data var/
            sudo find var -type d -exec chmod 777 {} \;
            sudo find var -type f -exec chmod 666 {} \;
            
            # Restart services
            sudo systemctl restart postgresql
            sudo systemctl restart php8.4-fpm
            sudo systemctl restart caddy