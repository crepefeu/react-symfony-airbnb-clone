security:
  # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
  password_hashers:
    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: "auto"
  # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
  providers:
    # used to reload user from session & other features (e.g. switch_user)
    app_user_provider:
      entity:
        class: App\Entity\User
        property: email
  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login_check
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true
      entry_point: jwt
      provider: app_user_provider
      jwt: ~

    main:
      lazy: true
      provider: app_user_provider

  role_hierarchy:
    ROLE_HOST: ROLE_USER
    ROLE_ADMIN: [ROLE_HOST, ROLE_USER]

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/api/auth, roles: PUBLIC_ACCESS }
    - { path: ^/api/properties, roles: PUBLIC_ACCESS, methods: [GET] }
    - { path: ^/api/properties, roles: ROLE_USER, methods: [POST, PUT, DELETE] }
    - { path: ^/api/properties/create, roles: ROLE_USER, methods: [POST, PUT, DELETE] }
    - { path: ^/api/reviews, roles: ROLE_USER }
    - { path: ^/api/admin, roles: ROLE_ADMIN }
    - { path: ^/api/bookings/user, roles: ROLE_USER }
    - { path: ^/api/bookings/manage, roles: ROLE_HOST }
    - { path: ^/api/bookings/confirm, roles: ROLE_HOST }
    - { path: ^/api/bookings/cancel, roles: ROLE_USER }
    - { path: ^/api/bookings/create, roles: ROLE_USER }
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/register, roles: PUBLIC_ACCESS }
    - { path: ^/api/drafts, roles: ROLE_USER }

when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
